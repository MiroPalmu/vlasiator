# Suggested modules
###module load clang (used for some libraries, not for running)

#module purge
#module load nvhpc/21.2
#module load openmpi/4.0.5-cuda
#module load cuda/11.2
#  Also, add this to your job script:
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/projappl/project_2002873/libraries/clang/10.0.0/boost/lib

#======== Vectorization ==========
#Set vector backend type for vlasov solvers, sets precision and length.
#Options:
# AVX:	    VEC4D_AGNER, VEC4F_AGNER, VEC8F_AGNER
# AVX512:   VEC8D_AGNER, VEC16F_AGNER
# Fallback: VEC4D_FALLBACK, VEC4F_FALLBACK, VEC8F_FALLBACK

ifeq ($(DISTRIBUTION_FP_PRECISION),SPF)
#Single-precision
	VECTORCLASS = VEC8F_FALLBACK
else
#Double-precision
	VECTORCLASS = VEC4D_FALLBACK
endif

#======== PAPI ==========
#Add PAPI_MEM define to use papi to report memory consumption?
#CXXFLAGS += -DPAPI_MEM
#testpackage: CXXFLAGS += -DPAPI_MEM

#======== Allocator =========
#Use jemalloc instead of system malloc to reduce memory fragmentation https://github.com/jemalloc/jemalloc
#Configure jemalloc with  --with-jemalloc-prefix=je_ when installing it
CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE


#======= Compiler and compilation flags =========
# NOTES on compiler flags:
# CXXFLAGS is for compiler flags, they are always used
# MATHFLAGS are for special math etc. flags, these are only applied on solver functions
# LDFLAGS flags for linker

#-DNO_WRITE_AT_ALL:  Define to disable write at all to
#                    avoid memleak (much slower IO)
#-DMPICH_IGNORE_CXX_SEEK: Ignores some multiple definition
#                         errors that come up when using
#                         mpi.h in c++ on Cray

#FLAGS =
CMP = mpic++
LNK = mpic++
NVCC = nvcc
CC = g++
#CC = mpicc
NVCC = nvcc
CUDAFLAGS += -arch=sm_80
CXX = mpic++
#CUDAFLAGS += -arch=sm_60
#CUDAFLAGS = -gencode arch=compute_80,code=sm_80 -std=c++11

CC_BRAND = pgi
CC_BRAND_VERSION = 19.7
CXXFLAGS += -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -Minfo=accel -ta=tesla:lineinfo,keepbin,keepgpu,keepptx -Manno -g -nomp
testpackage: CXXFLAGS += -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -Minfo=accel -ta=tesla:lineinfo,keepbin,keepgpu,keepptx -Manno -nomp

#GNU flags:
#CC_BRAND = nvhpc
#CC_BRAND_VERSION = 21.2
#CXXFLAGS += -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -gpu=cc80 -Minfo=accel -acc -fopenmp
#-Minfo=accel -ta=tesla:lineinfo,keepbin,keepgpu,keepptx -Manno -g -nomp
#testpackage: CXXFLAGS += -g -O2 -acc -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -Minfo=accel

CUDAFLAGS += -D${FP_PRECISION}
CUDAFLAGS += -D${DISTRIBUTION_FP_PRECISION}

MATHFLAGS =
LDFLAGS = -O2 -g  -ta=tesla:lineinfo,keepbin,keepgpu,keepptx -L/appl/spack/v016/install-tree/gcc-4.8.5/nvhpc-21.2-l6xyb4/Linux_x86_64/21.2/cuda/11.2/lib64
LIB_MPI = -lgomp



# BOOST_VERSION = current trilinos version
# ZOLTAN_VERSION = current trilinos verson

#======== Libraries ===========

#MPT_VERSION = 4.0.5-cuda
#JEMALLOC_VERSION = 4.0.4
LIBRARY_PREFIX = /projappl/project_2002873/libraries/nvhpc/21.2
LIBRARY_PREFIX2 = /projappl/project_2002873/libraries/clang/10.0.0

#compiled libraries
#INC_BOOST = -I/usr/include/boost/
#LIB_BOOST = -L/usr/lib/x86_64-linux-gnu/ -lboost_program_options

#LIB_PAPI = -I/$(LIBRARY_PREFIX2)/papi/include -lpapi
#INC_PAPI = -L/$(LIBRARY_PREFIX2)/papi/lib

INC_BOOST = -I/$(LIBRARY_PREFIX2)/boost/include
LIB_BOOST = -L/$(LIBRARY_PREFIX2)/boost/lib -lboost_program_options

INC_ZOLTAN = -I/$(LIBRARY_PREFIX)/zoltan/include
LIB_ZOLTAN = -L/$(LIBRARY_PREFIX)/zoltan/lib -lzoltan

#INC_JEMALLOC = -I/$(LIBRARY_PREFIX)/include
#LIB_JEMALLOC = -L/$(LIBRARY_PREFIX)/lib -ljemalloc -Wl,-rpath=$(LIBRARY_PREFIX)/lib
INC_JEMALLOC = -I/$(LIBRARY_PREFIX2)/jemalloc/include
LIB_JEMALLOC = -L/$(LIBRARY_PREFIX2)/jemalloc/lib -ljemalloc -Wl,-rpath=$(LIBRARY_PREFIX2)/jemalloc/lib

INC_VLSV = -I$(LIBRARY_PREFIX)/vlsv
LIB_VLSV = -L$(LIBRARY_PREFIX)/vlsv -lvlsv -Wl,-rpath=$(LIBRARY_PREFIX)/vlsv/lib

LIB_PROFILE = -L$(LIBRARY_PREFIX)/phiprof/lib -lphiprof -Wl,-rpath=$(LIBRARY_PREFIX)/phiprof/lib
INC_PROFILE = -I$(LIBRARY_PREFIX)/phiprof/include

#LIB_CUDA = -L/usr/local/cuda/lib64 -lcuda -lcudart

#header libraries
INC_EIGEN = -I$(LIBRARY_PREFIX)/eigen
INC_DCCRG = -I$(LIBRARY_PREFIX)/dccrg
INC_FSGRID = -I$(LIBRARY_PREFIX)/fsgrid
